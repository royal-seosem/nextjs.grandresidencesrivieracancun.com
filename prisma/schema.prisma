generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accommodation_contents {
  id                Int            @id @default(autoincrement()) @db.UnsignedInt
  accommodation_id  Int            @db.UnsignedInt
  lang_id           Int            @db.UnsignedInt
  name              String?        @db.VarChar(100)
  short_description String?        @db.Text
  overview          String?        @db.Text
  alt               String?        @db.VarChar(100)
  alt2              String?        @db.VarChar(100)
  alt3              String?        @db.VarChar(100)
  alt4              String?        @db.VarChar(100)
  alt5              String?        @db.VarChar(100)
  alt6              String?        @db.VarChar(100)
  caption           String?        @db.VarChar(200)
  caption2          String?        @db.VarChar(200)
  caption3          String?        @db.VarChar(200)
  caption4          String?        @db.VarChar(200)
  caption5          String?        @db.VarChar(200)
  caption6          String?        @db.VarChar(200)
  title             String?        @db.VarChar(70)
  metadescription   String?        @db.VarChar(155)
  accommodations    accommodations @relation(fields: [accommodation_id], references: [id], onDelete: Cascade, map: "fk_accommodation_contents_accommodations1")
  langs             langs          @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_accommodation_contents_langs1")

  @@index([accommodation_id], map: "fk_accommodation_contents_accommodations1_idx")
  @@index([lang_id], map: "fk_accommodation_contents_langs1_idx")
}

model accommodations {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  resort_id              Int                      @db.UnsignedInt
  identifier             String                   @unique(map: "identifier_UNIQUE") @db.VarChar(45)
  status                 Boolean                  @default(true)
  ihotelier_id           String?                  @db.VarChar(45)
  price                  Int?
  capacity               Int?
  area                   Int?
  accommodation_contents accommodation_contents[]
  resorts                resorts                  @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_accommodations_resorts1")

  @@index([resort_id], map: "fk_accommodations_resorts1_idx")
}

model activities {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  resort_id         Int                 @db.UnsignedInt
  identifier        String              @db.VarChar(45)
  status            Boolean             @default(true)
  resorts           resorts             @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_activities_resorts1")
  activity_contents activity_contents[]

  @@index([resort_id], map: "fk_activities_resorts1_idx")
}

model activity_contents {
  id                Int        @id @default(autoincrement()) @db.UnsignedInt
  activity_id       Int        @db.UnsignedInt
  lang_id           Int        @db.UnsignedInt
  name              String?    @db.VarChar(55)
  short_description String?    @db.Text
  alt               String?    @db.VarChar(100)
  alt2              String?    @db.VarChar(100)
  overview          String?    @db.Text
  activities        activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, map: "fk_activity_contents_activities1")
  langs             langs      @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_activity_contents_langs1")

  @@index([activity_id], map: "fk_activity_contents_activities1_idx")
  @@index([lang_id], map: "fk_activity_contents_langs1_idx")
}

model agent_resorts {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  agents_id    Int     @db.UnsignedInt
  resorts_id   Int     @db.UnsignedInt
  ihotelier_id String  @db.VarChar(6)
  code_process Int     @default(0) @db.SmallInt
  observations String? @db.Text
  agents       agents  @relation(fields: [agents_id], references: [id], onDelete: Cascade, map: "fk_agent_resorts_agents")
  resorts      resorts @relation(fields: [resorts_id], references: [id], onDelete: Cascade, map: "fk_resorts_agents")

  @@index([agents_id], map: "fk_agent_resorts_agents")
  @@index([resorts_id], map: "fk_resorts_agents")
}

model agents {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  type_code        String          @default("`iata`") @db.VarChar(10)
  iata             String          @db.VarChar(30)
  password         String          @db.VarChar(60)
  remember_token   String?         @db.VarChar(100)
  email            String          @db.VarChar(70)
  guest_title      String          @db.VarChar(5)
  guest_first_name String          @db.VarChar(60)
  guest_last_name  String          @db.VarChar(60)
  agency_name      String          @db.VarChar(100)
  address_one      String          @db.VarChar(250)
  address_two      String?         @db.VarChar(250)
  city             String          @db.VarChar(50)
  state            String          @db.VarChar(50)
  postal_code      String          @db.VarChar(10)
  country          String          @db.VarChar(50)
  phone_number     String          @db.VarChar(16)
  fax_number       String?         @db.VarChar(16)
  genesis_status   String?         @db.VarChar(255)
  genesis_response String?         @db.Text
  created_at       DateTime        @db.DateTime(0)
  updated_at       DateTime?       @db.DateTime(0)
  agent_resorts    agent_resorts[]
}

model audits {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  user_type      String?   @db.VarChar(255)
  user_id        BigInt?   @db.UnsignedBigInt
  event          String    @db.VarChar(255)
  auditable_id   Int       @db.UnsignedInt
  auditable_type String    @db.VarChar(255)
  old_values     String?   @db.Text
  new_values     String?   @db.Text
  url            String?   @db.Text
  ip_address     String?   @db.VarChar(45)
  user_agent     String?   @db.VarChar(255)
  tags           String?   @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([auditable_id, auditable_type], map: "audits_auditable_id_auditable_type_index")
  @@index([user_id, user_type], map: "audits_user_id_user_type_index")
}

model blocked_emails {
  email String? @db.Char(255)
  error String? @db.Text
  id    Int     @id @default(autoincrement())
}

model calendario_editorial {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  url            String    @db.Text
  content        String    @db.Text
  index          Int?      @db.SmallInt
  active         Int?      @db.SmallInt
  lang           String    @db.Char(2)
  note_intern_id Int?
  destination_id Int
  created_at     DateTime  @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  deleted_at     DateTime? @db.DateTime(0)
}

model captcha_logs {
  id         Int       @id @default(autoincrement())
  form_data  String    @db.Text
  score      String?   @db.Char(3)
  created_at DateTime? @default(now()) @db.DateTime(0)
  response   String?   @db.Text
}

model command_histories {
  id              Int       @id @default(autoincrement())
  command_key     String?   @db.VarChar(50)
  proyect         String?   @db.VarChar(50)
  project         String?   @db.VarChar(50)
  command         String?   @db.VarChar(20)
  start_time      DateTime? @db.DateTime(0)
  end_time        DateTime? @db.DateTime(0)
  command_status  Int?
  command_counter Int?      @default(0)
  command_error   Int?      @default(0)
}

model commands {
  id           Int     @id @default(autoincrement())
  command_key  String? @db.VarChar(50)
  project      String? @db.VarChar(50)
  command      String? @db.VarChar(20)
  periodicidad String? @db.Text
  type         String? @db.VarChar(20)
}

model companies {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @db.VarChar(45)
  identifier    String          @unique(map: "identifier_UNIQUE") @db.VarChar(100)
  status        Boolean         @default(true)
  website       String?         @db.VarChar(200)
  company_pages company_pages[]
}

model company_page_contents {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  company_page_id Int           @db.UnsignedInt
  lang_id         Int           @db.UnsignedInt
  h1              String?       @db.VarChar(100)
  h2              String?       @db.VarChar(100)
  h3              String?       @db.VarChar(100)
  h4              String?       @db.VarChar(100)
  h5              String?       @db.VarChar(100)
  h6              String?       @db.VarChar(100)
  h1_content      String?       @db.Text
  h2_content      String?       @db.Text
  h3_content      String?       @db.Text
  h4_content      String?       @db.Text
  h5_content      String?       @db.Text
  h6_content      String?       @db.Text
  title           String?       @db.VarChar(70)
  metadescription String?       @db.VarChar(155)
  keywords        String?       @db.VarChar(150)
  og_image        String?       @db.VarChar(200)
  alt1            String?       @db.VarChar(100)
  alt2            String?       @db.VarChar(100)
  alt3            String?       @db.VarChar(100)
  alt4            String?       @db.VarChar(100)
  alt5            String?       @db.VarChar(100)
  alt6            String?       @db.VarChar(100)
  caption1        String?       @db.VarChar(200)
  caption2        String?       @db.VarChar(200)
  caption3        String?       @db.VarChar(200)
  company_pages   company_pages @relation(fields: [company_page_id], references: [id], onDelete: Cascade, map: "fk_company_page_contents_company_pages1")
  langs           langs         @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_company_page_contents_langs1")

  @@index([company_page_id], map: "fk_company_page_contents_company_pages1_idx")
  @@index([lang_id], map: "fk_company_page_contents_langs1_idx")
}

model company_pages {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  company_id            Int                     @db.UnsignedInt
  name                  String                  @db.VarChar(45)
  identifier            String                  @unique(map: "identifier_UNIQUE") @db.VarChar(100)
  status                Boolean                 @default(true)
  company_page_contents company_page_contents[]
  companies             companies               @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_pages_company")

  @@index([company_id], map: "fk_company_pages_company_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model concept_concept_tag {
  concept_tag_id Int? @db.UnsignedInt
  concept_id     Int? @db.UnsignedInt

  @@ignore
}

model concept_concepts {
  id                Int     @default(autoincrement()) @db.UnsignedInt
  concept_id        Int
  concept_id2       Int
  concept_resort_id Int
  img_concept_es    String  @default("") @db.VarChar(50)
  img_concept_en    String  @default("") @db.VarChar(50)
  bloque            Boolean @default(true)
  order             Int     @db.TinyInt

  @@id([id, concept_id])
}

model concept_contents {
  id                  Int     @default(autoincrement()) @db.UnsignedInt
  lang_id             Int
  concept_id          Int
  title               String? @default("") @db.VarChar(255)
  title_template      String? @db.Text
  subtitle            String? @default("") @db.VarChar(100)
  description         String? @db.Text
  subtitle2           String? @default("") @db.VarChar(100)
  description2        String? @db.Text
  img_banner          String? @default("") @db.VarChar(100)
  img_landing         String? @default("") @db.VarChar(100)
  img_concept         String? @default("") @db.VarChar(100)
  img_amenity         String? @default("") @db.VarChar(100)
  seo_title           String? @default("") @db.VarChar(100)
  seo_metadescription String? @default("") @db.VarChar(155)
  seo_alt             String? @default("") @db.VarChar(100)
  box_title           String? @default("") @db.VarChar(250)
  box_subtitle        String? @db.VarChar(100)
  box_description     String? @db.Text
  footer              String? @db.Text
  content_extra       String? @db.Text
  gms_content         String? @db.Text

  @@id([id, lang_id, concept_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model concept_countries {
  concept_id   Int
  country_iso2 String  @db.Char(2)
  type         String? @db.Char(10)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model concept_resort_concept_tag {
  concept_tag_id    Int? @db.UnsignedInt
  concept_resort_id Int? @db.UnsignedInt

  @@ignore
}

model concept_resort_contents {
  id                Int     @default(autoincrement()) @db.UnsignedInt
  lang_id           Int
  concept_resort_id Int
  img_hotel         String? @default("") @db.VarChar(55)
  img_concept       String? @default("") @db.VarChar(55)
  description       String? @db.Text
  inclusion         String? @db.Text
  label             String? @default("") @db.VarChar(25)
  terms             String? @db.Text
  extra1            String? @db.VarChar(255)
  content_extra     String? @db.Text
  inclusion_detail  String? @db.Text

  @@id([id, lang_id, concept_resort_id])
}

model concept_resort_section {
  concept_resort_id Int
  section_id        Int

  @@id([concept_resort_id, section_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model concept_resorts {
  id                        Int       @default(autoincrement()) @db.UnsignedInt
  concept_id                Int
  resort_id                 Int
  plan_id                   Int
  ihotelier_rate_id         Int?
  ihotelier_private_rate_id Int?
  ihotelier_repetitive_id   Int?      @default(0)
  ihotelier_identifier      String?   @db.VarChar(10)
  discount_code             String?   @default("") @db.VarChar(15)
  discount_code_agent       String?   @default("") @db.VarChar(10)
  min_nights                Int       @default(0) @db.TinyInt
  travel_window_start       DateTime? @db.Date
  travel_window_end         DateTime? @db.Date
  bloque                    Boolean   @default(true)
  seccion                   String    @db.Text
  status                    Boolean   @default(true)
  order                     Int       @default(1) @db.TinyInt
  type_booking              Boolean?
  rate                      Decimal?  @default(0.00) @db.Decimal(10, 2)
  discount                  Decimal?  @default(0.00) @db.Decimal(10, 2)
  private_rate              Decimal?  @default(0.00) @db.Decimal(10, 2)
  private_discount          Decimal?  @default(0.00) @db.Decimal(10, 2)
  repetitive_rate           Decimal?  @db.Decimal(10, 2)
  repetitive_discount       Decimal?  @db.Decimal(10, 2)
  ih_rate_end_date          DateTime? @db.Date
  ih_rate_start_date        DateTime? @db.Date
  mx_rate                   Decimal?  @db.Decimal(10, 2)
  mx_discount               Decimal?  @db.Decimal(10, 2)
  mx_private_rate           Decimal?  @db.Decimal(10, 2)
  mx_private_discount       Decimal?  @db.Decimal(10, 2)
  mx_repetitive_rate        Decimal?  @db.Decimal(10, 2)
  mx_repetitive_discount    Decimal?  @db.Decimal(10, 2)
  mx_ih_rate_start_date     DateTime? @db.Date
  mx_ih_rate_end_date       DateTime? @db.Date

  @@id([id, concept_id, resort_id, plan_id])
}

model concept_tags {
  id      Int     @id @default(autoincrement()) @db.UnsignedInt
  name_es String? @db.VarChar(100)
  name_en String? @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model concepts {
  id                   Int       @id @default(autoincrement()) @db.UnsignedInt
  name                 String    @db.Char(50)
  url_es               String    @db.VarChar(50)
  url_en               String    @db.VarChar(50)
  booking_window_start DateTime  @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  booking_window_end   DateTime  @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  travel_window_start  DateTime? @default(dbgenerated("('0000-00-00')")) @db.Date
  travel_window_end    DateTime? @default(dbgenerated("('0000-00-00')")) @db.Date
  type_concept         String    @db.VarChar(5)
  countdown_template   Int       @default(0) @db.SmallInt
  visibility           Boolean   @default(false)
  seccion              String    @db.Text
  status               Boolean
  template_id          Boolean   @default(false)
  display_es           Boolean?  @default(true)
  api_rate             Boolean?  @default(true)
  display_en           Boolean   @default(true)
  ebb_label            Boolean?  @default(true)
  index_follow         Boolean   @default(false)
  apply_no_member      Boolean   @default(true)
  apply_lead           Boolean   @default(true)
  apply_member         Boolean   @default(true)
  apply_repetitive     Boolean   @default(true)
  global_offer_uuid    String?   @db.Char(36)
  is_flash             Boolean?  @default(false)
  origin_offer         Int?      @default(0) @db.SmallInt
  video                Int?      @default(1) @db.TinyInt
  country_filter       String?   @default("1") @db.VarChar(10)
  updated_at           DateTime  @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  created_at           DateTime  @db.DateTime(0)
  country_exclude      String?   @db.VarChar(10)
}

model concepts_travel_window {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  concept_id Int?     @db.UnsignedInt
  start_date DateTime @db.Date
  end_date   DateTime @db.Date

  @@index([concept_id], map: "fk_concepts_travel_concepts")
}

model config {
  id    Int     @id @default(autoincrement())
  key   String? @db.Char(10)
  value String? @db.Text
}

model countries {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  name_es String @db.VarChar(45)
  name_en String @db.VarChar(45)
}

model currencies {
  id               Int      @default(autoincrement())
  resort_ihotelier Int
  currency         String   @db.Char(3)
  exchange_rate    Decimal  @db.Decimal(10, 2)
  created_at       DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  updated_at       DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)

  @@id([id, resort_ihotelier, currency])
}

model destination_contents {
  id                     Int          @id @default(autoincrement()) @db.UnsignedInt
  destination_id         Int          @db.UnsignedInt
  lang_id                Int          @db.UnsignedInt
  short_description      String?      @db.Text
  short_offer            String?      @db.VarChar(200)
  overview               String?      @db.Text
  tips                   String?      @db.Text
  url_video              String?      @db.VarChar(200)
  title                  String?      @db.VarChar(70)
  metadescription        String?      @db.VarChar(155)
  keywords               String?      @db.VarChar(150)
  alt1                   String?      @db.VarChar(100)
  alt2                   String?      @db.VarChar(100)
  alt3                   String?      @db.VarChar(100)
  caption1               String?      @db.VarChar(200)
  caption2               String?      @db.VarChar(200)
  caption3               String?      @db.VarChar(200)
  offers_title           String?      @db.VarChar(70)
  offers_metadescription String?      @db.VarChar(155)
  offers_keywords        String?      @db.VarChar(150)
  offers_description     String?      @db.Text
  general_description    String?      @db.Text
  destinations           destinations @relation(fields: [destination_id], references: [id], onDelete: Cascade, map: "fk_destination_contents_destinations1")
  langs                  langs        @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_destination_contents_langs1")

  @@index([destination_id], map: "fk_destination_contents_destinations1_idx")
  @@index([lang_id], map: "fk_destination_contents_langs1_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model destination_resort {
  destination_id Int          @db.UnsignedInt
  resort_id      Int          @db.UnsignedInt
  destinations   destinations @relation(fields: [destination_id], references: [id], onDelete: Cascade, map: "fk_destination_hotel_destinations1")
  resorts        resorts      @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_destination_hotel_resorts1")

  @@index([destination_id], map: "fk_destination_hotel_destinations1_idx")
  @@index([resort_id], map: "fk_destination_hotel_resorts1_idx")
  @@ignore
}

model destinations {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  name                 String                 @db.VarChar(45)
  identifier           String                 @unique(map: "identifier_UNIQUE") @db.VarChar(45)
  status               Boolean                @default(true)
  location             destinations_location
  main                 Boolean                @default(false)
  name_es              String                 @db.VarChar(50)
  name_en              String                 @db.VarChar(50)
  country_es           String                 @db.VarChar(50)
  country_en           String                 @db.VarChar(50)
  coordinate           String                 @default("0,0") @db.VarChar(45)
  destination_group    Int?                   @default(1) @db.SmallInt
  destination_contents destination_contents[]
  destination_resort   destination_resort[]   @ignore
}

model dining_contents {
  id                Int     @id @default(autoincrement()) @db.UnsignedInt
  dining_id         Int     @db.UnsignedInt
  lang_id           Int     @db.UnsignedInt
  short_description String? @db.Text
  alt               String? @db.VarChar(100)
  alt2              String? @db.VarChar(45)
  overview          String? @db.Text
  dinings           dinings @relation(fields: [dining_id], references: [id], onDelete: Cascade, map: "fk_dining_contents_dinings1")
  langs             langs   @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_dining_contents_langs1")

  @@index([dining_id], map: "fk_dining_contents_dinings1_idx")
  @@index([lang_id], map: "fk_dining_contents_langs1_idx")
}

model dinings {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  resort_id       Int               @db.UnsignedInt
  identifier      String            @unique(map: "identifier_UNIQUE") @db.VarChar(45)
  status          Boolean           @default(true)
  name            String            @db.VarChar(45)
  inhouse         Boolean           @default(true)
  order           Int?              @db.TinyInt
  dining_contents dining_contents[]
  resorts         resorts           @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_dinings_resorts1")

  @@index([resort_id], map: "fk_dinings_resorts1_idx")
}

model experience_contents {
  id                  Int         @id @default(autoincrement()) @db.UnsignedInt
  experience_id       Int         @db.UnsignedInt
  lang_id             Int         @db.UnsignedInt
  name                String?     @db.VarChar(45)
  short_description   String?     @db.Text
  short_offer         String?     @db.VarChar(200)
  overview            String?     @db.Text
  items_title         String?     @db.VarChar(45)
  item1               String?     @db.Text
  item2               String?     @db.Text
  item3               String?     @db.Text
  item4               String?     @db.Text
  item5               String?     @db.Text
  item6               String?     @db.Text
  item7               String?     @db.Text
  resorts_description String?     @db.Text
  title               String?     @db.VarChar(70)
  metadescription     String?     @db.VarChar(155)
  keywords            String?     @db.VarChar(150)
  alt1                String?     @db.VarChar(100)
  alt2                String?     @db.VarChar(100)
  alt3                String?     @db.VarChar(100)
  alt4                String?     @db.VarChar(100)
  alt5                String?     @db.VarChar(100)
  alt6                String?     @db.VarChar(100)
  alt7                String?     @db.VarChar(100)
  alt8                String?     @db.VarChar(100)
  alt9                String?     @db.VarChar(100)
  alt10               String?     @db.VarChar(45)
  caption1            String?     @db.VarChar(200)
  caption2            String?     @db.VarChar(200)
  caption3            String?     @db.VarChar(200)
  experiences         experiences @relation(fields: [experience_id], references: [id], onDelete: Cascade, map: "fk_experience_contents_experiences1")
  langs               langs       @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_experience_contents_langs1")

  @@index([experience_id], map: "fk_experience_contents_experiences1_idx")
  @@index([lang_id], map: "fk_experience_contents_langs1_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model experience_resort {
  experience_id Int         @db.UnsignedInt
  resort_id     Int         @db.UnsignedInt
  experiences   experiences @relation(fields: [experience_id], references: [id], onDelete: Cascade, map: "fk_experience_resort_experiences1")
  resorts       resorts     @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_experience_resort_resorts1")

  @@index([experience_id], map: "fk_experience_resort_experiences1_idx")
  @@index([resort_id], map: "fk_experience_resort_resorts1_idx")
  @@ignore
}

model experiences {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  identifier          String                @unique(map: "identifier_UNIQUE") @db.VarChar(45)
  status              Boolean               @default(true)
  experience_contents experience_contents[]
  experience_resort   experience_resort[]   @ignore
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model general_page_contents {
  id                   Int                   @id @default(autoincrement()) @db.UnsignedInt
  website_id           Int                   @db.UnsignedInt
  lang_id              Int                   @db.UnsignedInt
  identifier           String                @db.VarChar(80)
  status               Boolean?              @default(true)
  name                 String?               @db.VarChar(200)
  subtitle             String?               @db.VarChar(200)
  description          String?               @db.Text
  div1                 String?               @db.Text
  item1                String?               @db.VarChar(200)
  div2                 String?               @db.Text
  item2                String?               @db.VarChar(200)
  div3                 String?               @db.Text
  item3                String?               @db.VarChar(200)
  div4                 String?               @db.Text
  item4                String?               @db.VarChar(200)
  div5                 String?               @db.Text
  item5                String?               @db.VarChar(200)
  div6                 String?               @db.Text
  item6                String?               @db.VarChar(200)
  div7                 String?               @db.Text
  item7                String?               @db.VarChar(200)
  title                String?               @db.VarChar(70)
  metadescription      String?               @db.VarChar(155)
  alt1                 String?               @db.VarChar(100)
  alt2                 String?               @db.VarChar(100)
  alt3                 String?               @db.VarChar(100)
  alt4                 String?               @db.VarChar(100)
  alt5                 String?               @db.VarChar(100)
  alt6                 String?               @db.VarChar(100)
  alt7                 String?               @db.VarChar(100)
  alt8                 String?               @db.VarChar(100)
  alt9                 String?               @db.VarChar(100)
  alt10                String?               @db.VarChar(100)
  caption1             String?               @db.VarChar(200)
  caption2             String?               @db.VarChar(200)
  caption3             String?               @db.VarChar(200)
  langs                langs                 @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_general_page_contents_langs1")
  general_page_website general_page_website?

  @@index([lang_id], map: "fk_general_page_contents_langs1_idx")
}

model general_page_website {
  general_page_id       Int                   @id @db.UnsignedInt
  website_id            Int                   @db.UnsignedInt
  general_page_contents general_page_contents @relation(fields: [general_page_id], references: [id], onDelete: Cascade, map: "fk_gp_website_gpc1")
  websites              websites              @relation(fields: [website_id], references: [id], onDelete: Cascade, map: "fk_gpw_websites1")

  @@index([website_id], map: "fk_general_page_website_gp1_idx")
}

model gms_users {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  name           String    @db.VarChar(255)
  email          String    @unique(map: "email_UNIQUE") @db.VarChar(255)
  password       String    @db.VarChar(60)
  remember_token String?   @db.VarChar(100)
  repetitive     Int?      @db.TinyInt
  birth_date     DateTime? @db.Date
  created_at     DateTime  @default(dbgenerated("('2015-01-01 06:00:00')")) @db.Timestamp(0)
  updated_at     DateTime  @default(dbgenerated("('2015-01-01 06:00:00')")) @db.Timestamp(0)
  country        String?   @db.Char(3)
  state_province String?   @db.Char(3)
  postal_code    String?   @db.Char(10)
  phone_number   String?   @db.Char(16)
  last_login     DateTime? @db.DateTime(0)
  last_name      String?   @db.VarChar(255)
}

model gr_offer {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(45)
  end_date          DateTime?          @db.DateTime(0)
  start_date        DateTime?          @db.DateTime(0)
  url_es            String?            @db.VarChar(50)
  url_en            String?            @db.VarChar(50)
  visibility        Boolean?           @default(false)
  apply_all         Boolean?           @default(false)
  apply_ep          Boolean?           @default(false)
  apply_bb          Boolean?           @default(false)
  meta_index        Boolean?           @default(false)
  booking_type      Boolean?           @default(true)
  show_en           Boolean?           @default(true)
  show_es           Boolean?           @default(true)
  global_offer_uuid String?            @db.Char(36)
  rateplan_all      String?            @db.Char(10)
  rateplan_all_lead String?            @db.Char(10)
  rateplan_all_rep  String?            @db.Char(10)
  rateplan_ep       String?            @db.Char(10)
  rateplan_ep_lead  String?            @db.Char(10)
  rateplan_ep_rep   String?            @db.Char(10)
  rateplan_bb       String?            @db.Char(10)
  rateplan_bb_lead  String?            @db.Char(10)
  rateplan_bb_rep   String?            @db.Char(10)
  gr_offer_travel   gr_offer_travel[]
  gr_offer_section  gr_offer_section[]
  gr_offer_content  gr_offer_content[]
}

model gr_offer_content {
  id          Int     @id @default(autoincrement())
  gr_offer_id Int
  lang        Int     @db.TinyInt
  content_all String? @db.LongText
  content_ep  String? @db.LongText
  content_bb  String? @db.LongText

  gr_offer  gr_offer @relation(fields: [gr_offer_id], references: [id])
}

model gr_offer_rate {
  id           Int       @id @default(autoincrement())
  rate_plan    String    @db.Char(10)
  rate_date    DateTime? @db.Date
  rate         Float?    @db.Float
  discount     Float?    @db.Float
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  created_at   DateTime? @db.DateTime(0)
  mx_rate      Float?    @db.Float
  mx_discount  Float?    @db.Float
  mx_rate_date DateTime? @db.DateTime(0)
}

model gr_offer_section {
  gr_offer_id   Int
  gr_section_id Int
  rateplan      String   @default("") @db.Char(15)
  order         Int?     @default(0) @db.TinyInt

  gr_offer      gr_offer @relation(fields: [gr_offer_id], references: [id])

  @@id([gr_offer_id, gr_section_id, rateplan])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model gr_offer_travel {
  id          Int       @default(autoincrement())
  gr_offer_id Int
  start_date  DateTime? @db.DateTime(0)
  end_date    DateTime? @db.DateTime(0)
  gr_offer    gr_offer  @relation(fields: [gr_offer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_gr_offer")

  @@id([id, gr_offer_id])
  @@index([gr_offer_id], map: "fk_id_gr_offer")
}

model gr_travelclick {
  id       Int       @id @default(autoincrement())
  ih_id    String?   @db.Char(10)
  tw_start DateTime? @db.Date
  tw_end   DateTime? @db.Date
  rate     Decimal?  @db.Decimal(10, 2)
  rate_dsc Decimal?  @db.Decimal(10, 2)
}

model history_unavailable {
  id              Int       @id @default(autoincrement())
  booking_request String?   @db.MediumText
  api_request     String?   @db.Text
  api_response    String?   @db.Text
  api_status      String?   @db.TinyText
  created_at      DateTime? @default(now()) @db.DateTime(0)
}

model hotelrateplan {
  hotel_id     Int
  rate_plan_id Int

  @@id([hotel_id, rate_plan_id])
}

model hotels {
  id         Int    @id
  name       String @db.VarChar(100)
  zone_id    Int
  stars      String @db.VarChar(2)
  type_class String @db.Char(10)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model hreflang {
  en String? @default("") @db.VarChar(255)
  es String? @default("") @db.VarChar(255)

  @@ignore
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model langs {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  name                   String                   @db.VarChar(45)
  accommodation_contents accommodation_contents[]
  activity_contents      activity_contents[]
  company_page_contents  company_page_contents[]
  destination_contents   destination_contents[]
  dining_contents        dining_contents[]
  experience_contents    experience_contents[]
  general_page_contents  general_page_contents[]
  offer_contents         offer_contents[]
  package_contents       package_contents[]
  page_contents          page_contents[]
  policies_contents      policies_contents[]
  resort_contents        resort_contents[]
}

model login_modules {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(50)
  status Boolean
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model migrations {
  migration String @db.VarChar(255)
  batch     Int

  @@ignore
}

model offer_contents {
  id                      Int     @id @default(autoincrement()) @db.UnsignedInt
  offer_id                Int     @db.UnsignedInt
  lang_id                 Int     @db.UnsignedInt
  headline                String? @db.VarChar(45)
  short_description       String? @db.Text
  overview                String? @db.Text
  conditions              String? @db.Text
  title                   String? @db.VarChar(70)
  metadescription         String? @db.VarChar(155)
  keywords                String? @db.VarChar(150)
  alt                     String? @db.VarChar(100)
  caption                 String? @db.VarChar(200)
  facebook_description    String? @db.Text
  title_short_description String? @db.VarChar(60)
  item1                   String? @db.VarChar(60)
  item2                   String? @db.VarChar(60)
  footer                  String? @db.Text
  langs                   langs   @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_offer_contents_langs1")
  offers                  offers  @relation(fields: [offer_id], references: [id], onDelete: Cascade, map: "fk_offer_contents_offers1")

  @@index([lang_id], map: "fk_offer_contents_langs1_idx")
  @@index([offer_id], map: "fk_offer_contents_offers1_idx")
}

model offer_contents_plan {
  id               Int     @id @default(autoincrement()) @db.UnsignedInt
  offer_content_id Int?
  plan_id          Int?    @db.UnsignedInt
  offer_id         Int?    @db.UnsignedInt
  lang_id          Int?    @db.UnsignedInt
  title            String? @db.VarChar(70)
  benefits         String? @db.Text
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model offer_resort {
  offer_id          Int     @db.UnsignedInt
  resort_id         Int     @db.UnsignedInt
  ihotelier_rate_id Int?
  minimum           Int?
  offers            offers  @relation(fields: [offer_id], references: [id], onDelete: Cascade, map: "fk_offer_resort_offers1")
  resorts           resorts @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_offer_resort_resorts1")

  @@index([offer_id], map: "fk_offer_resort_offers1_idx")
  @@index([resort_id], map: "fk_offer_resort_resorts1_idx")
  @@ignore
}

model offer_resort_plan {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  offer_id  Int?     @db.UnsignedInt
  resort_id Int?     @db.UnsignedInt
  plan_id   Int?     @db.UnsignedInt
  room      String?  @db.VarChar(100)
  price     Int?
  offers    offers?  @relation(fields: [offer_id], references: [id], onDelete: Cascade, map: "fk_offer_resort_plan_offers1")
  plans     plans?   @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "fk_offer_resort_plan_plans1")
  resorts   resorts? @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_offer_resort_plan_resorts1")

  @@index([offer_id], map: "fk_offer_resort_plan_offers1_idx")
  @@index([plan_id], map: "fk_offer_resort_plan_plans1_idx")
  @@index([resort_id], map: "fk_offer_resort_plan_resorts1_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model offer_travel_window {
  offer_id   Int
  start_date DateTime? @db.DateTime(0)
  end_date   DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model offer_website {
  offer_id   Int      @db.UnsignedInt
  website_id Int      @db.UnsignedInt
  offers     offers   @relation(fields: [offer_id], references: [id], onDelete: Cascade, map: "fk_offer_website_offers1")
  websites   websites @relation(fields: [website_id], references: [id], onDelete: Cascade, map: "fk_offer_website_websites1")

  @@index([offer_id], map: "fk_offer_website_offers1_idx")
  @@index([website_id], map: "fk_offer_website_resorts1_idx")
  @@ignore
}

model offers {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  name              String              @db.VarChar(45)
  identifier        String              @unique(map: "identifier_UNIQUE") @db.VarChar(45)
  status            Boolean             @default(true)
  priority          Int                 @default(1)
  main              Boolean             @default(true)
  mobile_only       Boolean             @default(false)
  start_date        DateTime?           @default(dbgenerated("('2015-01-01 00:00:00')")) @db.DateTime(0)
  end_date          DateTime?           @default(dbgenerated("('2015-01-01 00:00:00')")) @db.DateTime(0)
  rate_access_code  String?             @db.VarChar(45)
  discount_code     String?             @default("") @db.VarChar(10)
  benefits          String?             @db.VarChar(150)
  ihotelier_type    Boolean?
  category          Boolean?            @default(true)
  offer_contents    offer_contents[]
  offer_resort      offer_resort[]      @ignore
  offer_resort_plan offer_resort_plan[]
  offer_website     offer_website[]     @ignore
}

model package_contents {
  id                Int      @id @default(autoincrement()) @db.UnsignedInt
  package_id        Int      @db.UnsignedInt
  lang_id           Int      @db.UnsignedInt
  headline          String?  @db.VarChar(45)
  overview          String?  @db.Text
  conditions        String?  @db.Text
  title             String?  @db.VarChar(70)
  metadescription   String?  @db.VarChar(155)
  keywords          String?  @db.VarChar(150)
  alt               String?  @db.VarChar(100)
  caption           String?  @db.VarChar(200)
  short_description String?  @db.Text
  langs             langs    @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_package_contents_langs1")
  packages          packages @relation(fields: [package_id], references: [id], onDelete: Cascade, map: "fk_package_contents_packages1")

  @@index([lang_id], map: "fk_package_contents_langs1_idx")
  @@index([package_id], map: "fk_package_contents_packages1_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model package_resort {
  package_id           Int
  resort_id            Int
  ihotelier_package_id Int?
  minimum              Int?

  @@ignore
}

model package_travel_window {
  package_id Int       @id @db.UnsignedInt
  start_date DateTime? @db.DateTime(0)
  end_date   DateTime? @db.DateTime(0)
}

model packages {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  name             String             @db.VarChar(45)
  identifier       String             @db.VarChar(45)
  status           Boolean            @default(true)
  priority         Int                @default(1)
  package_contents package_contents[]
}

model page_contents {
  id              Int     @id @default(autoincrement()) @db.UnsignedInt
  page_id         Int     @db.UnsignedInt
  lang_id         Int     @db.UnsignedInt
  item1           String? @db.VarChar(200)
  div1            String? @db.Text
  item2           String? @db.VarChar(200)
  div2            String? @db.Text
  item3           String? @db.VarChar(200)
  div3            String? @db.Text
  item4           String? @db.VarChar(200)
  div4            String? @db.Text
  item5           String? @db.VarChar(200)
  div5            String? @db.Text
  item6           String? @db.VarChar(200)
  div6            String? @db.Text
  item7           String? @db.VarChar(200)
  div7            String? @db.Text
  title           String? @db.VarChar(70)
  metadescription String? @db.VarChar(155)
  og_image        String? @db.VarChar(200)
  alt1            String? @db.VarChar(100)
  alt2            String? @db.VarChar(100)
  alt3            String? @db.VarChar(100)
  alt4            String? @db.VarChar(100)
  alt5            String? @db.VarChar(100)
  alt6            String? @db.VarChar(100)
  alt7            String? @db.VarChar(100)
  alt8            String? @db.VarChar(100)
  alt9            String? @db.VarChar(100)
  alt10           String? @db.VarChar(100)
  caption1        String? @db.VarChar(100)
  caption2        String? @db.VarChar(100)
  caption3        String? @db.VarChar(100)
  caption4        String? @db.VarChar(100)
  caption5        String? @db.VarChar(100)
  caption6        String? @db.VarChar(100)
  langs           langs   @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_page_contents_langs1")
  pages           pages   @relation(fields: [page_id], references: [id], onDelete: Cascade, map: "fk_page_contents_pages1")

  @@index([lang_id], map: "fk_page_contents_langs1_idx")
  @@index([page_id], map: "fk_page_contents_pages1_idx")
}

model pages {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  resort_id     Int             @db.UnsignedInt
  name          String          @db.VarChar(45)
  identifier    String          @db.VarChar(45)
  status        Boolean
  page_contents page_contents[]
  resorts       resorts         @relation(fields: [resort_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pages_resorts1")

  @@index([resort_id], map: "fk_pages_resorts1_idx")
}

model password_resets {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  email      String   @db.Text
  token      String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
}

model permission_role {
  permission_id Int         @db.UnsignedInt
  role_id       Int         @db.UnsignedInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "permission_role_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "permission_role_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "permission_role_role_id_foreign")
}

model permissions {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @unique(map: "permissions_name_unique") @db.VarChar(255)
  display_name    String?           @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
}

model place_interesting_resorts {
  id                   Int                @id @default(autoincrement()) @db.UnsignedInt
  resort_id            Int                @db.UnsignedInt
  place_interesting_id Int                @db.UnsignedInt
  resorts              resorts            @relation(fields: [resort_id], references: [id], onUpdate: Restrict, map: "places_interesting_resorts_fk")
  place_interestings   place_interestings @relation(fields: [place_interesting_id], references: [id], onUpdate: Restrict, map: "places_interesting_resorts_fk_1")

  @@index([resort_id], map: "places_interesting_resorts_fk")
  @@index([place_interesting_id], map: "places_interesting_resorts_fk_1")
}

model place_interestings {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  name_en                   String                      @db.VarChar(50)
  name_es                   String                      @db.VarChar(50)
  type_icon                 String                      @default("regular") @db.VarChar(30)
  location                  String                      @db.VarChar(250)
  label_position            String                      @default("0,0") @db.VarChar(50)
  place_interesting_resorts place_interesting_resorts[]
}

model plans {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  identifier        String              @db.VarChar(20)
  name              String              @db.VarChar(45)
  status            Boolean?            @default(true)
  priority          Int?
  name_es           String              @db.VarChar(30)
  name_en           String              @db.VarChar(30)
  offer_resort_plan offer_resort_plan[]
  resort_plan       resort_plan[]       @ignore
}

model plans_travel_window {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  concept_resort_id Int       @db.UnsignedInt
  start_date        DateTime  @default(dbgenerated("('0000-00-00')")) @db.Date
  end_date          DateTime  @db.Date
  created_at        DateTime  @db.DateTime(0)
  updated_at        DateTime? @db.DateTime(0)
}

model policies {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  website_id        Int                 @db.UnsignedInt
  name              String?             @db.VarChar(45)
  identifier        String?             @db.VarChar(45)
  status            Boolean?
  policies_contents policies_contents[]
}

model policies_contents {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  policies_id     Int      @db.UnsignedInt
  lang_id         Int?     @db.UnsignedInt
  item1           String?  @db.VarChar(80)
  div1            String?  @db.Text
  item2           String?  @db.VarChar(80)
  div2            String?  @db.Text
  title           String?  @db.VarChar(70)
  metadescription String?  @db.VarChar(155)
  alt1            String?  @db.VarChar(100)
  alt2            String?  @db.VarChar(100)
  langs           langs?   @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_policies_contents_langs1")
  policies        policies @relation(fields: [policies_id], references: [id], onDelete: Cascade, map: "fk_policies_contents_policies1")

  @@index([lang_id], map: "fk_policies_contents_langs1_idx")
  @@index([policies_id], map: "fk_policies_contents_policies1_idx")
}

model rate_plans {
  id       Int    @id
  name_esp String @db.VarChar(20)
  name_eng String @db.VarChar(20)
}

model rateplan_gds {
  id_rateplan     Int      @id @default(autoincrement())
  id_hotel        Int
  codigo          String   @db.VarChar(45)
  rateplan        String?  @db.VarChar(45)
  descripcion     String?  @db.VarChar(300)
  comision        String?  @db.VarChar(45)
  extra_descuento String?  @db.VarChar(45)
  texto1          String?  @db.VarChar(300)
  status          Boolean?
}

model resort_contents {
  id                             Int     @id @default(autoincrement()) @db.UnsignedInt
  resort_id                      Int     @db.UnsignedInt
  lang_id                        Int     @db.UnsignedInt
  short_description              String? @db.Text
  short_offer                    String? @db.VarChar(200)
  overview                       String? @db.Text
  highlights                     String? @db.Text
  accommodation                  String? @db.Text
  dining                         String? @db.Text
  activity                       String? @db.Text
  offer                          String? @db.Text
  address                        String? @db.VarChar(200)
  url_video                      String? @db.VarChar(200)
  tripadvisor_widget             String? @db.Text
  title                          String? @db.VarChar(70)
  metadescription                String? @db.VarChar(155)
  keywords                       String? @db.VarChar(150)
  alt1                           String? @db.VarChar(100)
  alt2                           String? @db.VarChar(100)
  alt3                           String? @db.VarChar(100)
  caption1                       String? @db.VarChar(200)
  caption2                       String? @db.VarChar(200)
  caption3                       String? @db.VarChar(200)
  offers_title                   String? @db.VarChar(70)
  offers_metadescription         String? @db.VarChar(155)
  offers_keywords                String? @db.VarChar(155)
  offers_description             String? @db.Text
  tripadvisor_awards             String? @db.Text
  dining_title                   String? @db.VarChar(70)
  dining_metadescription         String? @db.VarChar(155)
  accommodations_title           String? @db.VarChar(70)
  accommodations_metadescription String? @db.VarChar(155)
  activities_title               String? @db.VarChar(70)
  activities_metadescription     String? @db.VarChar(155)
  locality                       String? @db.VarChar(45)
  region                         String? @db.VarChar(45)
  country                        String? @db.VarChar(45)
  langs                          langs   @relation(fields: [lang_id], references: [id], onDelete: Cascade, map: "fk_resort_contents_langs1")
  resorts                        resorts @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_resort_contents_resorts1")

  @@index([lang_id], map: "fk_resort_contents_langs1_idx")
  @@index([resort_id], map: "fk_resort_contents_resorts1_idx")
}

model resort_gds {
  id_resort      Int      @id @default(autoincrement())
  nombre         String   @db.VarChar(100)
  identificador  String   @db.VarChar(45)
  estrellas      String?  @db.VarChar(45)
  texto1         String?  @db.VarChar(200)
  pegasus        String?  @db.VarChar(45)
  amadeus        String?  @db.VarChar(45)
  galileo        String?  @db.VarChar(45)
  sabre          String?  @db.VarChar(45)
  world_span     String?  @db.VarChar(45)
  pegasus_odd    String?  @db.VarChar(45)
  travel_web_net String?  @db.VarChar(45)
  status         Boolean?
  website        String?  @db.VarChar(200)
  alt1           String?  @db.VarChar(100)
  alt2           String?  @db.VarChar(100)
  alt3           String?  @db.VarChar(100)
  alt4           String?  @db.VarChar(100)
  alt5           String?  @db.VarChar(100)
  alt6           String?  @db.VarChar(100)
  alt7           String?  @db.VarChar(100)
  alt8           String?  @db.VarChar(100)
  alt9           String?  @db.VarChar(100)
  alt10          String?  @db.VarChar(100)
  alt11          String?  @db.VarChar(100)
  alt12          String?  @db.VarChar(100)
  ubicacion      String?  @db.VarChar(40)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model resort_plan {
  resort_id Int     @db.UnsignedInt
  plan_id   Int     @db.UnsignedInt
  plans     plans   @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "fk_resort_plan_plans1")
  resorts   resorts @relation(fields: [resort_id], references: [id], onDelete: Cascade, map: "fk_resort_plan_resorts1")

  @@index([plan_id], map: "fk_resort_plan_plans1_idx")
  @@index([resort_id], map: "fk_resort_plan_resorts1_idx")
  @@ignore
}

model resort_rooms {
  id        Int     @default(autoincrement()) @db.UnsignedInt
  resort_id Int
  room_code Int
  name      String  @default("") @db.VarChar(70)
  status    Boolean @default(true)

  @@id([id, resort_id, room_code])
}

model resorts {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  name                      String                      @db.VarChar(100)
  short_name                String?                     @db.VarChar(100)
  identifier                String                      @unique(map: "identifier_UNIQUE") @db.VarChar(45)
  identifier_rr             String                      @db.VarChar(50)
  status                    Boolean                     @default(true)
  main                      Boolean?                    @default(false)
  website                   String?                     @db.VarChar(200)
  coordinates               String?                     @db.VarChar(45)
  location                  resorts_location?
  ihotelier_id              String?                     @db.VarChar(6)
  reservhotel_id            String                      @db.VarChar(15)
  ihotelier_theme           String?                     @db.VarChar(5)
  plan                      resorts_plan?
  discount                  String?                     @db.VarChar(45)
  stars                     Float?
  rating                    Float?
  review_count              Int?                        @db.UnsignedInt
  id_analytics              String?                     @db.VarChar(45)
  area                      String?                     @db.VarChar(45)
  rating_trip_advisor       Float?
  cp                        String?                     @db.VarChar(5)
  destination_id            Int
  country_code              String?                     @db.VarChar(2)
  locality                  String?                     @db.VarChar(100)
  region                    String?                     @db.VarChar(100)
  street                    String?                     @db.VarChar(100)
  trip_advisor_location     String?                     @db.Char(4)
  trip_advisor_cleanliness  String?                     @db.Char(4)
  trip_advisor_service      String?                     @db.Char(4)
  trip_advisor_values       String?                     @db.Char(4)
  accommodations            accommodations[]
  activities                activities[]
  agent_resorts             agent_resorts[]
  destination_resort        destination_resort[]        @ignore
  dinings                   dinings[]
  experience_resort         experience_resort[]         @ignore
  offer_resort              offer_resort[]              @ignore
  offer_resort_plan         offer_resort_plan[]
  pages                     pages[]
  place_interesting_resorts place_interesting_resorts[]
  resort_contents           resort_contents[]
  resort_plan               resort_plan[]               @ignore
}

model resorts_travel_window {
  id                Int       @default(autoincrement()) @db.UnsignedInt
  concept_resort_id Int       @db.UnsignedInt
  start_date        DateTime  @db.Date
  end_date          DateTime  @db.Date
  deleted_at        DateTime? @db.DateTime(0)
  updated_at        DateTime? @db.DateTime(0)

  @@id([id, concept_resort_id])
}

model review_sources {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(20)
  status Boolean? @default(true)
}

model review_types {
  id      Int      @id @default(autoincrement())
  name_en String   @db.VarChar(10)
  name_es String   @db.VarChar(10)
  status  Boolean? @default(true)
}

model reviews {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  title         String?   @db.VarChar(100)
  review        String?   @db.Text
  review_date   DateTime? @db.DateTime(0)
  traveler_name String?   @db.VarChar(30)
  city          String?   @db.VarChar(30)
  resort_id     Int?
  website_id    Int?
  status        Boolean?
  url           String?   @db.VarChar(200)
  lang_id       Int?
  source        Int?
  type          Int?
}

model role_user {
  user_id Int   @db.UnsignedInt
  role_id Int   @db.UnsignedInt
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "role_user_role_id_foreign")
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "role_user_user_id_foreign")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_user_role_id_foreign")
}

model roles {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @unique(map: "roles_name_unique") @db.VarChar(255)
  display_name    String?           @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
  role_user       role_user[]
}

model room_contents {
  resort_room_id BigInt @db.UnsignedBigInt
  language       String @db.Char(2)
  content        String @db.LongText
  id             BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  rooms          rooms  @relation(fields: [resort_room_id], references: [id], onUpdate: Restrict, map: "room_contents_resort_room_id_foreign")

  @@index([resort_room_id], map: "room_contents_resort_room_id_foreign")
}

model room_min_rates {
  id                  Int       @default(autoincrement()) @db.UnsignedInt
  resort_id           Int
  room_code           Int
  currency            String    @db.Char(3)
  date_start          DateTime? @db.Date
  date_end            DateTime? @db.Date
  rate                Decimal?  @db.Decimal(10, 2)
  discount            Decimal?  @db.Decimal(10, 2)
  lead_rateplan       String?   @db.VarChar(10)
  lead_rate           Decimal?  @db.Decimal(10, 2)
  lead_discount       Decimal?  @db.Decimal(10, 2)
  repetitive_rateplan String?   @db.VarChar(10)
  repetitive_rate     Decimal?  @db.Decimal(10, 2)
  repetitive_discount Decimal?  @db.Decimal(10, 2)
  created_at          DateTime? @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  updated_at          DateTime  @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  rateplanid          String?   @db.VarChar(100)

  @@id([id, resort_id, room_code])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model rooms {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name          String          @db.VarChar(70)
  resort_id     BigInt          @db.UnsignedBigInt
  room_view_id  BigInt?         @db.UnsignedBigInt
  group         String          @db.Char(3)
  room_code     BigInt          @db.UnsignedBigInt
  status        Int             @db.UnsignedTinyInt
  room_contents room_contents[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model section_concept {
  id_section Int
  id_concept Int
  order      Int? @default(0)

  @@ignore
}

model sections {
  id          Int    @id
  name        String @default("") @db.VarChar(50)
  description String @default("") @db.VarChar(50)
}

model subscription_module {
  id                   Int       @default(autoincrement())
  subscription_user_id Int
  login_module_id      Int
  email                Boolean?  @default(false)
  facebook             Boolean?  @default(false)
  google               Boolean?  @default(false)
  genesis_response     String?   @db.Text
  PID                  Int?
  created_at           DateTime? @default(now()) @db.DateTime(0)

  @@id([id, subscription_user_id, login_module_id])
  @@index([id, subscription_user_id], map: "subscription_user_id")
}

model subscription_reservations {
  id                   Int       @default(autoincrement())
  reservation_id       Int
  subscription_user_id Int
  hotel_id             Int
  hotel_name           String?   @db.Char(50)
  rooms                Boolean?
  adults               Int?      @db.TinyInt
  children             Int?      @db.TinyInt
  currency             String?   @db.Char(3)
  check_in             DateTime? @db.Date
  check_out            DateTime? @db.Date
  total                Float?    @db.Float
  reservation_status   Boolean?  @default(true)
  created_at           DateTime? @db.DateTime(0)
  updated_at           DateTime? @db.DateTime(0)

  @@id([id, reservation_id, subscription_user_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model supscription_users {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  uid               String    @unique(map: "uid_UNIQUE") @db.VarChar(255)
  hashid            String?   @db.Char(255)
  user_name         String    @db.VarChar(150)
  lastname          String?   @db.VarChar(150)
  password          String?   @db.VarChar(255)
  birth_date        DateTime? @db.Date
  country           String?   @db.Char(3)
  state_province    String?   @db.Char(3)
  postal_code       String?   @db.VarChar(10)
  phone_number      String?   @db.VarChar(16)
  repetitive        Boolean?  @default(false)
  last_login        DateTime? @db.DateTime(0)
  updated_at        DateTime? @db.DateTime(0)
  deleted_at        DateTime? @db.DateTime(0)
  created_at        DateTime  @default(now()) @db.DateTime(0)
  gid               String?   @db.Char(30)
  fbid              String?   @db.Char(30)
  gms_user_id       Int?
  email_verified_at DateTime? @db.DateTime(0)
  ip                String?   @db.Char(16)
}

model supscriptions {
  id                    Int       @id @default(autoincrement()) @db.UnsignedInt
  supscription_users_id Int
  campaing              String    @db.VarChar(250)
  optin                 Boolean   @default(false)
  double_optin          Boolean   @default(false)
  lang                  String    @db.Char(2)
  country               String?   @db.Char(3)
  ip_country            String?   @db.VarChar(3)
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)
}

model telescope_entries {
  sequence                BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                    String                   @unique(map: "telescope_entries_uuid_unique") @db.Char(36)
  batch_id                String                   @db.Char(36)
  family_hash             String?                  @db.VarChar(255)
  should_display_on_index Boolean                  @default(true)
  type                    String                   @db.VarChar(20)
  content                 String                   @db.LongText
  created_at              DateTime?                @db.DateTime(0)
  telescope_entries_tags  telescope_entries_tags[] @ignore

  @@index([batch_id], map: "telescope_entries_batch_id_index")
  @@index([created_at], map: "telescope_entries_created_at_index")
  @@index([family_hash], map: "telescope_entries_family_hash_index")
  @@index([type, should_display_on_index], map: "telescope_entries_type_should_display_on_index_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model telescope_entries_tags {
  entry_uuid        String            @db.Char(36)
  tag               String            @db.VarChar(255)
  telescope_entries telescope_entries @relation(fields: [entry_uuid], references: [uuid], onDelete: Cascade, onUpdate: Restrict, map: "telescope_entries_tags_entry_uuid_foreign")

  @@index([entry_uuid, tag], map: "telescope_entries_tags_entry_uuid_tag_index")
  @@index([tag], map: "telescope_entries_tags_tag_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model telescope_monitoring {
  tag String @db.VarChar(255)

  @@ignore
}

model users {
  id             Int         @id @default(autoincrement()) @db.UnsignedInt
  name           String      @db.VarChar(255)
  email          String      @unique(map: "email_UNIQUE") @db.VarChar(255)
  password       String      @db.VarChar(60)
  remember_token String?     @db.VarChar(100)
  created_at     DateTime    @default(dbgenerated("('2015-01-01 06:00:00')")) @db.Timestamp(0)
  updated_at     DateTime    @default(dbgenerated("('2015-01-01 06:00:00')")) @db.Timestamp(0)
  role_user      role_user[]
}

model website_concept_contents {
  id                  Int      @default(autoincrement()) @db.UnsignedInt
  lang_id             Int
  concept_id          Int
  website_id          Int
  title               String   @default("") @db.VarChar(100)
  title_template      String?  @db.Text
  subtitle            String   @default("") @db.VarChar(100)
  description         String   @db.Text
  subtitle2           String   @default("") @db.VarChar(100)
  description2        String   @db.Text
  img_banner          String   @default("") @db.VarChar(100)
  img_landing         String   @default("") @db.VarChar(100)
  img_concept         String   @default("") @db.VarChar(100)
  img_amenity         String   @default("") @db.VarChar(100)
  seo_title           String   @default("") @db.VarChar(100)
  seo_metadescription String   @default("") @db.VarChar(155)
  seo_alt             String   @default("") @db.VarChar(100)
  box_title           String   @default("") @db.VarChar(250)
  box_subtitle        String   @db.VarChar(100)
  box_description     String?  @db.Text
  footer              String?  @db.Text
  content_extra       String?  @db.Text
  gms_content         String?  @db.Text
  perzonalized        Boolean? @default(false)

  @@id([id, lang_id, concept_id, website_id])
}

model website_concept_resort_contents {
  id                Int     @default(autoincrement()) @db.UnsignedInt
  lang_id           Int
  concept_resort_id Int
  website_id        Int
  img_hotel         String  @db.VarChar(55)
  img_concept       String  @db.VarChar(55)
  description       String  @db.Text
  inclusion         String  @db.Text
  label             String  @db.VarChar(25)
  terms             String  @db.Text
  extra1            String? @db.VarChar(255)
  content_extra     String? @db.Text
  personalized      Boolean @default(false)

  @@id([id, lang_id, concept_resort_id, website_id])
}

model website_concept_sections {
  id         Int    @id @default(autoincrement())
  website_id Int
  concept_id Int
  resort_id  Int
  plan_id    Int
  section    String @db.Char(10)
  order_id   Int?   @default(0)
}

model websites {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  dominio              String?                @unique(map: "dominio_UNIQUE") @db.VarChar(100)
  name                 String?                @db.VarChar(100)
  status               Boolean?               @default(true)
  general_page_website general_page_website[]
  offer_website        offer_website[]        @ignore
}

model wedding_contacts {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  name           String   @db.VarChar(50)
  last_name      String   @db.VarChar(50)
  email          String   @db.VarChar(100)
  phone          String   @db.VarChar(20)
  type_event     String?  @db.VarChar(25)
  celebrate_date DateTime @db.Date
  guest          Int?
  country        String?  @db.VarChar(4)
  policy         Boolean
  register       String   @default("contact-us") @db.VarChar(100)
  lang           String?  @db.VarChar(3)
  created_at     DateTime @db.DateTime(0)
  updated_at     DateTime @db.DateTime(0)
  comment        String?  @db.VarChar(255)
  website        String?  @db.VarChar(100)
  resort         String?  @db.VarChar(50)
  utm_campaing   String?  @db.VarChar(255)
}

model weddings_contact_google {
  id             Int       @id @default(autoincrement())
  from_url       String?   @db.VarChar(100)
  first_name     String?   @db.VarChar(50)
  last_name      String?   @db.VarChar(50)
  email          String?   @db.VarChar(100)
  country        String?   @db.Char(2)
  type_event     String?   @db.VarChar(20)
  celebrate_date DateTime? @db.Date
  guest          Int?
  resort         String?   @db.VarChar(100)
  phone          String?   @db.VarChar(20)
  created_at     DateTime? @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
}

enum destinations_location {
  Mexican_Caribbean @map("Mexican Caribbean")
  Caribbean_Islands @map("Caribbean Islands")
}

enum resorts_location {
  Mexican_Caribbean @map("Mexican Caribbean")
  Riviera_Maya      @map("Riviera Maya")
  Caribbean_Islands @map("Caribbean Islands")
}

enum resorts_plan {
  All_Inclusive           @map("All Inclusive")
  EP
  All_Inclusive_Room_Only @map("All Inclusive/Room Only")
}
